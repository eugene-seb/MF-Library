# Execute only if it's a PR which comes from dev

name: PR to master

# This pipeline runs everytime there is a PR on master.
# Because the changes on the submodules are track on their own GitHub project,
# I intentionally don't listen to the changes of each submodule in order to trigger this pipeline.

on:
  pull_request:
    branches:
      - master  # I allow only PR from dev -> master

jobs:
  #-----------------------------------------------------------------------
  #--- Validate the PR's branch
  #-----------------------------------------------------------------------
  validate-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Enforce PRs to master must come from dev
        run: |
          if [[ "${{ github.head_ref }}" != "dev" ]]; then
            echo "❌ PRs to master must come from dev!"
            exit 1
          else
            echo "✅ PR from dev to master authorized."
          fi

  #-----------------------------------------------------------------------
  #--- Build and push user-service Docker image
  #-----------------------------------------------------------------------
  build-user-service:
    needs: validate-branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the submodule user-service
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Run the user-service tests
        run: |
          chmod +x ./submodules/user-service/mvnw
          ./submodules/user-service/mvnw -f ./submodules/user-service/pom.xml clean test

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push user-service Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./submodules/user-service
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/user-service:${{ github.sha }}
            ghcr.io/${{ github.repository }}/user-service:latest
          # Use Docker build cache stored in GitHub Container Registry to speed up builds.
          # 'cache-from' pulls existing cache layers; 'cache-to' pushes new layers for future
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}/user-service:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}/user-service:buildcache,mode=max

  #-----------------------------------------------------------------------
  #--- Build and push book-service Docker image
  #-----------------------------------------------------------------------
  build-book-service:
    needs: validate-branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the submodule book-service
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Run the book-service tests
        run: |
          chmod +x ./submodules/book-service/mvnw
          ./submodules/book-service/mvnw -f ./submodules/book-service/pom.xml clean test

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push book-service Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./submodules/book-service
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/book-service:${{ github.sha }}
            ghcr.io/${{ github.repository }}/book-service:latest
          # Use Docker build cache stored in GitHub Container Registry to speed up builds.
          # 'cache-from' pulls existing cache layers; 'cache-to' pushes new layers for future
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}/book-service:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}/book-service:buildcache,mode=max

  #-----------------------------------------------------------------------
  #--- Build and push review-service Docker image
  #-----------------------------------------------------------------------
  build-review-service:
    needs: validate-branch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the submodule review-service
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Run the review-service tests
        run: |
          chmod +x ./submodules/review-service/mvnw
          ./submodules/review-service/mvnw -f ./submodules/review-service/pom.xml clean test

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push review-service Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./submodules/review-service
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/review-service:${{ github.sha }}
            ghcr.io/${{ github.repository }}/review-service:latest
          # Use Docker build cache stored in GitHub Container Registry to speed up builds.
          # 'cache-from' pulls existing cache layers; 'cache-to' pushes new layers for future
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}/review-service:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}/review-service:buildcache,mode=max

  #-----------------------------------------------------------------------
  #--- Build and push registry-service Docker image
  #-----------------------------------------------------------------------
  build-registry-service:
    needs: validate-branch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the submodule registry-service
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Run the registry-service tests
        run: |
          chmod +x ./submodules/registry-service/mvnw
          ./submodules/registry-service/mvnw -f ./submodules/registry-service/pom.xml clean test

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push registry-service Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./submodules/registry-service
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/registry-service:${{ github.sha }}
            ghcr.io/${{ github.repository }}/registry-service:latest
          # Use Docker build cache stored in GitHub Container Registry to speed up builds.
          # 'cache-from' pulls existing cache layers; 'cache-to' pushes new layers for future
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}/registry-service:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}/registry-service:buildcache,mode=max

  #-----------------------------------------------------------------------
  #--- Build and push api-gateway Docker image
  #-----------------------------------------------------------------------
  build-api-gateway:
    needs: validate-branch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the submodule api-gateway
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Run the api-gateway tests
        run: |
          chmod +x ./submodules/api-gateway/mvnw
          ./submodules/api-gateway/mvnw -f ./submodules/api-gateway/pom.xml clean test

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push api-gateway Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./submodules/api-gateway
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/api-gateway:${{ github.sha }}
            ghcr.io/${{ github.repository }}/api-gateway:latest
          # Use Docker build cache stored in GitHub Container Registry to speed up builds.
          # 'cache-from' pulls existing cache layers; 'cache-to' pushes new layers for future
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}/api-gateway:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}/api-gateway:buildcache,mode=max

  #-----------------------------------------------------------------------
  #--- Build and push mflibrary-frontend Docker image
  #-----------------------------------------------------------------------
  build-mflibrary-frontend:
    needs: validate-branch
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci
        working-directory: ./mflibrary-frontend

      - name: Install Chrome
        run: sudo apt-get update && sudo apt-get install -y google-chrome-stable

      - name: Run frontend tests
        run: npx ng test --watch=false --browsers=ChromeHeadless
        working-directory: ./mflibrary-frontend

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push mflibrary-frontend Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./mflibrary-frontend
          push: true
          file: ./mflibrary-frontend/Dockerfile
          tags: |
            ghcr.io/${{ github.repository }}/mflibrary-frontend:latest
            ghcr.io/${{ github.repository }}/mflibrary-frontend:${{ github.sha }}
          # Use Docker build cache stored in GitHub Container Registry to speed up builds.
          # 'cache-from' pulls existing cache layers; 'cache-to' pushes new layers for future
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}/mflibrary-frontend:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}/mflibrary-frontend:buildcache,mode=max
