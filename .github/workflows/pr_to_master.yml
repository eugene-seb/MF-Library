# Execute only if it's a PR which comes from dev

name: PR to master

# This pipeline runs everytime there is a PR on master.
# Because the changes on the submodules are track on their own GitHub project,
# I intentionally don't listen to the changes of each submodule in order to trigger this pipeline.

on:
  pull_request:
    branches:
      - master  # I allow only PR from dev -> master

jobs:
  #-----------------------------------------------------------------------
  #--- Validate the PR's branch
  #-----------------------------------------------------------------------
  validate-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Enforce PRs to master must come from dev
        run: |
          if [[ "${{ github.head_ref }}" != "dev" ]]; then
            echo "❌ PRs to master must come from dev!"
            exit 1
          else
            echo "✅ PR from dev to master authorized."
          fi

  #-----------------------------------------------------------------------
  #--- Build backend services
  #-----------------------------------------------------------------------
  build-backend-services:
    needs: validate-branch
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ api-gateway, registry-service, user-service, book-service, review-service ]
    env:
      IMAGE_TAG: ${{ github.sha }}
      REPO_NAME: ${{ github.repository }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Run tests
        run: |
          chmod +x ./submodules/${{ matrix.service }}/mvnw
          ./submodules/${{ matrix.service }}/mvnw -f ./submodules/${{ matrix.service }}/pom.xml clean test

      # GitHub Container Registry enforces all repository paths to be lowercase.
      - name: Set lowercase repo name
        run: echo "REPO_LC=${REPO_NAME,,}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver: docker-container

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./submodules/${{ matrix.service }}
          push: true
          tags: |
            ghcr.io/${{ env.REPO_LC }}/${{ matrix.service }}:${{ env.IMAGE_TAG }}
            ghcr.io/${{ env.REPO_LC }}/${{ matrix.service }}:latest
          cache-from: type=registry,ref=ghcr.io/${{ env.REPO_LC }}/${{ matrix.service }}:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ env.REPO_LC }}/${{ matrix.service }}:buildcache,mode=max

  #-----------------------------------------------------------------------
  #--- Build and push mflibrary-frontend Docker image
  #-----------------------------------------------------------------------
  build-mflibrary-frontend:
    needs: validate-branch
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ github.sha }}
      REPO_NAME: ${{ github.repository }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci
        working-directory: ./submodules/mflibrary-frontend

      - name: Install Chrome
        run: sudo apt-get update && sudo apt-get install -y google-chrome-stable

      - name: Run frontend tests
        run: npx ng test --watch=false --browsers=ChromeHeadless
        working-directory: ./submodules/mflibrary-frontend

      # GitHub Container Registry enforces all repository paths to be lowercase.
      - name: Set lowercase repo name
        run: echo "REPO_LC=${REPO_NAME,,}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver: docker-container

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push mflibrary-frontend Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./submodules/mflibrary-frontend
          push: true
          file: ./submodules/mflibrary-frontend/Dockerfile
          tags: |
            ghcr.io/${{ env.REPO_LC }}/mflibrary-frontend:latest
            ghcr.io/${{ env.REPO_LC }}/mflibrary-frontend:${{ env.IMAGE_TAG }}
          # Use Docker build cache stored in GitHub Container Registry to speed up builds.
          # 'cache-from' pulls existing cache layers; 'cache-to' pushes new layers for future
          cache-from: type=registry,ref=ghcr.io/${{ env.REPO_LC }}/mflibrary-frontend:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ env.REPO_LC }}/mflibrary-frontend:buildcache,mode=max
